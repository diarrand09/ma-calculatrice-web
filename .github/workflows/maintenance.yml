name: 🔧 Maintenance Automatique

# Planification : tous les dimanche à 2h du matin UTC
on:
  schedule:
    - cron: '0 2 * * 0'  # Chaque dimanche à 2h (corrigé : * * 0 au lieu de * *0)
  workflow_dispatch:  # Exécution manuelle

jobs:
  # Job 1 : Vérifications de santé
  health-check:
    name: 🏥 Vérification de Santé
    runs-on: ubuntu-latest
    
    steps:
    - name: 📦 Checkout du code
      uses: actions/checkout@v4
    
    - name: 🔍 Vérification des liens morts
      run: |
        echo "🔗 Vérification des liens dans le README..."
        # Vérifier si le README existe
        if [ -f README.md ]; then
          echo "✅ README.md trouvé"
          # Extraire les liens HTTP/HTTPS du README
          grep -oE 'https?://[^)]*' README.md || echo "ℹ️ Aucun lien externe trouvé"
        else
          echo "⚠️ README.md non trouvé"
        fi
        echo "✅ Vérification des liens terminée"
    
    - name: 📊 Analyse de la taille du projet
      run: |
        echo "📏 Analyse de la taille du repository..."
        # Taille totale
        TOTAL_SIZE=$(du -sh . | cut -f1)
        echo "💾 Taille totale : $TOTAL_SIZE"
        
        # Nombre de fichiers par type
        echo "📁 Statistiques des fichiers :"
        echo "  - Total fichiers : $(find . -type f -not -path './.git/*' | wc -l)"
        echo "  - Fichiers JavaScript : $(find . -name "*.js" -not -path './.git/*' | wc -l)"
        echo "  - Fichiers CSS : $(find . -name "*.css" -not -path './.git/*' | wc -l)"
        echo "  - Fichiers HTML : $(find . -name "*.html" -not -path './.git/*' | wc -l)"
        
        # Top 5 des plus gros fichiers
        echo "📋 Top 5 des plus gros fichiers :"
        find . -type f -not -path './.git/*' -exec du -h {} + | sort -rh | head -5
    
    - name: 🧹 Nettoyage des fichiers temporaires
      run: |
        echo "🧹 Nettoyage en cours..."
        
        # Compter avant nettoyage
        TEMP_FILES=$(find . -name "*.tmp" -o -name "*.log" -o -name "*~" -o -name ".DS_Store" | wc -l)
        echo "📊 Fichiers temporaires trouvés : $TEMP_FILES"
        
        # Nettoyage
        find . -name "*.tmp" -delete
        find . -name "*.log" -delete  
        find . -name "*~" -delete
        find . -name ".DS_Store" -delete
        
        echo "✅ Nettoyage terminé"
    
    - name: 🔒 Vérification de sécurité basique
      run: |
        echo "🔒 Vérification de sécurité..."
        
        # Chercher des patterns potentiellement dangereux
        echo "🔍 Recherche de secrets potentiels..."
        if grep -r -i "password\|secret\|api_key\|token" --include="*.js" --include="*.html" --include="*.css" . || true; then
          echo "⚠️ Patterns suspects trouvés (vérifiez manuellement)"
        else
          echo "✅ Aucun pattern suspect détecté"
        fi
        
        # Vérifier les permissions des fichiers
        echo "🔍 Vérification des permissions..."
        find . -type f -perm /111 -not -path './.git/*' | head -10 || echo "✅ Permissions normales"

  # Job 2 : Mise à jour de la documentation
  update-docs:
    name: 📚 Mise à jour Documentation
    runs-on: ubuntu-latest
    
    steps:
    - name: 📦 Checkout du code
      uses: actions/checkout@v4
    
    - name: 🏗️ Configuration Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: 📝 Génération des statistiques
      run: |
        echo "📊 Génération des statistiques du projet..."
        
        # Compter les lignes de code de manière sécurisée
        JS_LINES=0
        CSS_LINES=0
        HTML_LINES=0
        
        if [ -d "js" ]; then
          JS_LINES=$(find js -name "*.js" -exec wc -l {} + 2>/dev/null | tail -1 | awk '{print $1}' || echo "0")
        fi
        
        if [ -d "css" ]; then
          CSS_LINES=$(find css -name "*.css" -exec wc -l {} + 2>/dev/null | tail -1 | awk '{print $1}' || echo "0")
        fi
        
        HTML_FILES=$(find . -maxdepth 2 -name "*.html" | wc -l)
        if [ $HTML_FILES -gt 0 ]; then
          HTML_LINES=$(find . -maxdepth 2 -name "*.html" -exec wc -l {} + 2>/dev/null | tail -1 | awk '{print $1}' || echo "0")
        fi
        
        TOTAL_LINES=$((JS_LINES + CSS_LINES + HTML_LINES))
        
        echo "📈 Statistiques du projet :"
        echo "  - JavaScript : $JS_LINES lignes"
        echo "  - CSS : $CSS_LINES lignes"  
        echo "  - HTML : $HTML_LINES lignes"
        echo "  - Total : $TOTAL_LINES lignes"
        
        # Créer un fichier de statistiques
        cat > STATS.md << EOF
        # 📊 Statistiques du Projet
        
        > Dernière mise à jour automatique : $(date -u "+%Y-%m-%d %H:%M:%S UTC")
        
        ## 📏 Lignes de Code
        
        | Langage    | Lignes | Pourcentage |
        |------------|--------|-------------|
        | JavaScript | $JS_LINES | $([ $TOTAL_LINES -gt 0 ] && echo "$((JS_LINES * 100 / TOTAL_LINES))%" || echo "0%") |
        | CSS        | $CSS_LINES | $([ $TOTAL_LINES -gt 0 ] && echo "$((CSS_LINES * 100 / TOTAL_LINES))%" || echo "0%") |
        | HTML       | $HTML_LINES | $([ $TOTAL_LINES -gt 0 ] && echo "$((HTML_LINES * 100 / TOTAL_LINES))%" || echo "0%") |
        | **Total**  | **$TOTAL_LINES** | **100%** |
        
        ## 🧪 Tests et Qualité
        - ✅ Tests automatisés actifs
        - 🔄 CI/CD fonctionnel
        - 🔒 Vérifications de sécurité : OK
        
        ## 📊 Métriques du Repository
        - 📁 Nombre de fichiers : $(find . -type f -not -path './.git/*' | wc -l)
        - 💾 Taille du projet : $(du -sh . | cut -f1)
        - 🏷️ Dernière maintenance : $(date -u "+%Y-%m-%d")
        
        ## 🚀 Statut des Services
        - GitHub Pages : ✅ Déployé
        - Actions CI/CD : ✅ Fonctionnel
        - Tests automatiques : ✅ Passants
        
        ---
        *Rapport généré automatiquement par GitHub Actions*
        EOF
        
        echo "✅ Statistiques générées dans STATS.md"
    
    - name: 📋 Mise à jour du README avec badge de maintenance
      run: |
        echo "📋 Ajout du badge de maintenance..."
        if [ -f README.md ]; then
          # Ajouter un badge de dernière maintenance si pas déjà présent
          if ! grep -q "Maintenance" README.md; then
            sed -i '1i ![Maintenance](https://img.shields.io/badge/Maintained-yes-green.svg)' README.md || true
            echo "✅ Badge de maintenance ajouté"
          else
            echo "ℹ️ Badge déjà présent"
          fi
        fi
    
    - name: 💾 Commit des mises à jour automatiques
      run: |
        # Configuration Git
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Vérifier s'il y a des changements
        if git diff --quiet && git diff --staged --quiet; then
          echo "ℹ️ Aucun changement à commiter"
        else
          git add STATS.md README.md 2>/dev/null || true
          git commit -m "🤖 Mise à jour automatique de la documentation
          
          - Statistiques du projet mises à jour
          - Badge de maintenance actualisé
          - Généré le $(date -u '+%Y-%m-%d à %H:%M UTC')" || echo "ℹ️ Rien à commiter"
          
          # Pousser les changements
          git push || echo "⚠️ Impossible de pousser les changements"
        fi

  # Job 3 : Rapport de maintenance
  maintenance-report:
    name: 📋 Rapport de Maintenance
    runs-on: ubuntu-latest  
    needs: [health-check, update-docs]
    if: always()
    
    steps:
    - name: 📊 Génération du rapport final
      run: |
        echo "📋 === RAPPORT DE MAINTENANCE HEBDOMADAIRE ==="
        echo "📅 Date : $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
        echo "🔄 Workflow déclenché par : ${{ github.event_name }}"
        echo ""
        echo "📊 Résultats des Jobs :"
        echo "🏥 Health Check : ${{ needs.health-check.result }}"
        echo "📚 Docs Update : ${{ needs.update-docs.result }}"
        echo ""
        
        # Déterminer le statut global
        if [ "${{ needs.health-check.result }}" = "success" ] && [ "${{ needs.update-docs.result }}" = "success" ]; then
          echo "✅ Maintenance terminée avec succès"
          echo "🎉 Tous les systèmes sont opérationnels"
        else
          echo "⚠️ Maintenance terminée avec des avertissements"
          echo "🔍 Vérifiez les logs pour plus de détails"
        fi
        
        echo ""
        echo "📈 Prochaine maintenance prévue : Dimanche prochain à 2h UTC"
        echo "🔗 Repository : ${{ github.repository }}"
        echo "🏷️ Commit : ${{ github.sha }}"
    
    - name: 📧 Notification en cas d'échec
      if: failure()
      run: |
        echo "🚨 ALERTE : La maintenance automatique a échoué !"
        echo "🔍 Consultez les logs GitHub Actions pour diagnostiquer le problème"
        echo "📅 Date de l'échec : $(date -u)"
        echo "🔗 Lien vers les logs : ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"